[gd_scene load_steps=14 format=3 uid="uid://csrvvfq3x0u3r"]

[ext_resource type="Script" path="res://entities/ant/ant.gd" id="1_6htid"]
[ext_resource type="Script" path="res://managers/influence_manager.gd" id="2_2mgsy"]
[ext_resource type="Script" path="res://entities/pheromone/pheromone.gd" id="2_tscyr"]
[ext_resource type="Texture2D" uid="uid://djfp7c852qxaq" path="res://entities/ant/Ant.svg" id="2_wmt1h"]
[ext_resource type="Resource" uid="uid://bqym7fdwwu5m4" path="res://entities/pheromone/resources/food_pheromone.tres" id="3_bxdt5"]
[ext_resource type="Script" path="res://logic/evaluation_system.gd" id="3_iddyu"]
[ext_resource type="Script" path="res://logic/evaluation_controller.gd" id="4_2cjl2"]
[ext_resource type="Resource" uid="uid://n55uv4uui3sc" path="res://entities/pheromone/resources/home_pheromone.tres" id="4_x6xol"]

[sub_resource type="GDScript" id="GDScript_xh62h"]
script/source = "class_name EvaluationCache
extends Node2D

signal value_invalidated(expression_id: String)

## Cached values for expressions
var _values: Dictionary = {}
## Last evaluation timestamps
var _timestamps: Dictionary = {}
## Dependencies (dependent -> dependencies)
var _dependencies: Dictionary = {}
## Map of expression ID to last update time
var _last_update_time: Dictionary = {}
## Track which expressions have changed this frame
var _changed_this_frame: Dictionary = {}
## Reverse dependencies (dependency -> dependents) for faster invalidation
var _reverse_dependencies: Dictionary = {}
var logger: Logger

func _init() -> void:
	logger = Logger.new(\"evaluation_cache\", DebugLogger.Category.LOGIC)

func set_value(expression_id: String, value: Variant, trigger_dependencies: bool = true) -> void:
	var old_value = _values.get(expression_id)
	var has_changed = old_value != value

	if has_changed:
		logger.trace(\"Cache updated for %s: %s -> %s\" % [expression_id, old_value, value])
		_values[expression_id] = value
		_last_update_time[expression_id] = Time.get_ticks_msec() / 1000.0
		_changed_this_frame[expression_id] = true
		if trigger_dependencies:
			invalidate_dependents(expression_id)

func has_value(expression_id: String) -> bool:
	return _values.has(expression_id)

func has_valid_value(expression_id: String) -> bool:
	return has_value(expression_id) and not _changed_this_frame.get(expression_id, false)

func get_value(expression_id: String) -> Variant:
	return _values.get(expression_id)

func needs_evaluation(expression_id: String) -> bool:
	return not _values.has(expression_id) or _changed_this_frame.get(expression_id, false)

func add_dependency(dependent: String, dependency: String) -> void:
	# Add forward dependency
	if dependent not in _dependencies:
		_dependencies[dependent] = []
	if not dependency in _dependencies[dependent]:
		_dependencies[dependent].append(dependency)
		logger.trace(\"Added forward dependency: [b]%s[/b] depends on [b]%s[/b]\" % [dependent, dependency])

	# Add reverse dependency for faster invalidation
	if dependency not in _reverse_dependencies:
		_reverse_dependencies[dependency] = []
	if not dependent in _reverse_dependencies[dependency]:
		_reverse_dependencies[dependency].append(dependent)
		logger.trace(\"Added reverse dependency: [b]%s[/b] affects [b]%s[/b]\" % [dependency, dependent])

## Only invalidate the dependents of the changed value
func invalidate_dependents(expression_id: String) -> void:
	if not _dependencies.has(expression_id):
		return

	var all_dependents = _dependencies[expression_id]
	var current_time = Time.get_ticks_msec() / 1000.0

	# Only invalidate dependents that haven't been updated recently
	var to_invalidate = []
	for dependent_id in all_dependents:
		var last_update = _last_update_time.get(dependent_id, 0.0)
		if current_time - last_update >= 0.05:  # 50ms threshold
			to_invalidate.append(dependent_id)

	if not to_invalidate.is_empty():
		logger.debug(\"Invalidated dependents for %s: %s\" % [expression_id, to_invalidate])
		for dependent_id in to_invalidate:
			_values.erase(dependent_id)
			# Track that this dependent needs evaluation this frame
			_changed_this_frame[dependent_id] = true

## Clear the changed_this_frame tracking at the end of each frame
func clear_frame_changes() -> void:
	_changed_this_frame.clear()

## Get the time since last update for an expression
func time_since_update(expression_id: String) -> float:
	var current_time = Time.get_ticks_msec() / 1000.0
	var last_update = _last_update_time.get(expression_id, 0.0)
	return current_time - last_update

func _invalidate_dependent_recursive(id: String, visited: Dictionary) -> void:
	# Don't invalidate the source value, only its dependents
	for dependent_id in _reverse_dependencies.get(id, []):
		if dependent_id in visited:
			continue

		visited[dependent_id] = true
		_values.erase(dependent_id)
		_timestamps.erase(dependent_id)
		value_invalidated.emit(dependent_id)

		# Continue up the dependency chain
		_invalidate_dependent_recursive(dependent_id, visited)

func remove_expression(id: String) -> void:
	_dependencies.erase(id)
	_values.erase(id)
	_timestamps.erase(id)

	# Clean up reverse dependencies
	for dep_id in _reverse_dependencies.get(id, []):
		var deps = _dependencies.get(dep_id, [])
		deps.erase(id)
		if deps.is_empty():
			_dependencies.erase(dep_id)

	_reverse_dependencies.erase(id)
	logger.trace(\"Removed expression %s from cache\" % id)

func get_debug_info(id: String) -> Dictionary:
	return {
		\"value\": _values.get(id, null),
		\"timestamp\": _timestamps.get(id, 0),
		\"dependencies\": _dependencies.get(id, []),
		\"reverse_dependencies\": _reverse_dependencies.get(id, [])
	}

func get_stats() -> Dictionary:
	return {
		\"cached_values\": _values.size(),
		\"dependencies\": _dependencies.size(),
		\"reverse_dependencies\": _reverse_dependencies.size()
	}
"

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_ikxuy"]
radius = 4.0
height = 18.0

[sub_resource type="CircleShape2D" id="CircleShape2D_bgmjh"]
radius = 9.00089

[sub_resource type="CircleShape2D" id="CircleShape2D_2p8x4"]
radius = 100.0

[sub_resource type="CircleShape2D" id="CircleShape2D_epip7"]
radius = 14.0

[node name="Ant" type="CharacterBody2D" groups=["ant"]]
disable_mode = 1
collision_layer = 0
collision_mask = 0
input_pickable = true
motion_mode = 1
script = ExtResource("1_6htid")
pheromones = Array[ExtResource("2_tscyr")]([ExtResource("3_bxdt5"), ExtResource("4_x6xol")])

[node name="InfluenceManager" type="Node2D" parent="."]
script = ExtResource("2_2mgsy")

[node name="EvaluationSystem" type="Node2D" parent="."]
script = ExtResource("3_iddyu")

[node name="EvaluationController" type="Node2D" parent="EvaluationSystem"]
script = ExtResource("4_2cjl2")

[node name="EvaluationCache" type="Node2D" parent="EvaluationSystem"]
script = SubResource("GDScript_xh62h")

[node name="NavigationAgent2D" type="NavigationAgent2D" parent="."]
unique_name_in_owner = true
simplify_path = true
simplify_epsilon = 1.5
avoidance_layers = 0
avoidance_mask = 0

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
unique_name_in_owner = true
visible = false
rotation = 1.5708
shape = SubResource("CapsuleShape2D_ikxuy")
debug_color = Color(0.552941, 0.752941, 0, 0.419608)

[node name="SenseArea" type="Area2D" parent="."]
unique_name_in_owner = true
visible = false
rotation = 1.5708
collision_layer = 0
collision_mask = 10
input_pickable = false

[node name="CollisionShape2D" type="CollisionShape2D" parent="SenseArea"]
position = Vector2(-1.07288e-05, 0.125512)
shape = SubResource("CircleShape2D_bgmjh")

[node name="SightArea" type="Area2D" parent="."]
unique_name_in_owner = true
rotation = 1.5708
collision_layer = 0
collision_mask = 14
input_pickable = false

[node name="CollisionShape2D" type="CollisionShape2D" parent="SightArea"]
shape = SubResource("CircleShape2D_2p8x4")

[node name="ReachArea" type="Area2D" parent="."]
unique_name_in_owner = true
modulate = Color(0.678431, 0.678431, 0, 1)
collision_layer = 2
collision_mask = 15

[node name="CollisionShape2D" type="CollisionShape2D" parent="ReachArea"]
shape = SubResource("CircleShape2D_epip7")
debug_color = Color(0.321569, 0.25098, 0.027451, 0.419608)

[node name="Sprite2D" type="Sprite2D" parent="."]
unique_name_in_owner = true
self_modulate = Color(0.462745, 0.678431, 0.94902, 1)
position = Vector2(0.0969868, 0.10746)
rotation = 1.5708
scale = Vector2(0.0961376, 0.124693)
texture = ExtResource("2_wmt1h")

[node name="MouthMarker" type="Marker2D" parent="."]
unique_name_in_owner = true
modulate = Color(0.352941, 0.513726, 0.172549, 1)
position = Vector2(14, 0)
gizmo_extents = 5.0

[connection signal="navigation_finished" from="NavigationAgent2D" to="." method="_on_nav_agent_navigation_finished"]
[connection signal="path_changed" from="NavigationAgent2D" to="." method="_on_navigation_agent_2d_path_changed"]
[connection signal="target_reached" from="NavigationAgent2D" to="." method="_on_navigation_agent_2d_target_reached"]
[connection signal="velocity_computed" from="NavigationAgent2D" to="." method="_on_navigation_agent_2d_velocity_computed"]
[connection signal="body_entered" from="SightArea" to="." method="_on_sight_area_body_entered"]
[connection signal="body_exited" from="SightArea" to="." method="_on_sight_area_body_exited"]
[connection signal="body_entered" from="ReachArea" to="." method="_on_reach_area_entered"]
