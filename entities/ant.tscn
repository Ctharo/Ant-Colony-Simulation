[gd_scene load_steps=7 format=3 uid="uid://csrvvfq3x0u3r"]

[ext_resource type="Texture2D" uid="uid://djfp7c852qxaq" path="res://entities/Ant.svg" id="2_wmt1h"]

[sub_resource type="GDScript" id="GDScript_bx07j"]
script/source = "class_name Ant
extends CharacterBody2D

#region Signals
signal spawned
signal food_spotted
signal ant_spotted
signal action_completed
signal pheromone_sensed
signal damaged
signal died
#endregion

#region Member Variables
## The unique identifier for this ant
var id: int

## The role of this ant in the colony
var role: String

## The colony this ant belongs to
var colony: Colony : set = set_colony

## The foods being carried by the ant
var carried_food: Foods :
	get:
		if not carried_food:
			carried_food = Foods.new()
		return carried_food
	set(value):
		carried_food = value
		carried_food.mark_as_carried()

## The task tree for this ant
var task_tree: TaskTree

## The navigation agent for this ant
var nav_agent: NavigationAgent2D

## Task update timer
var task_update_timer: float = 0.0

## Property access system
var _property_access: PropertyAccess :
	get:
		if not _property_access:
			_init_property_access()
		return _property_access

## How long cached values remain valid (in seconds)
const CACHE_DURATIONS = {
	\"pheromones\": 0.1,  # Pheromone data stays valid for 0.1 seconds
	\"food\": 0.1,        # Food detection stays valid for 0.1 seconds
	\"ants\": 0.1,        # Nearby ants data stays valid for 0.1 seconds
	\"colony\": 0.2,      # Colony-related data stays valid for 0.2 seconds
	\"stats\": 0.0        # Stats are always recalculated
}
#endregion

## Default category for logging
@export var log_category: DebugLogger.Category = DebugLogger.Category.ENTITY

## Source identifier for logging
@export var log_from: String :
	set(value):
		log_from = value
		_configure_logger()

## Array of additional categories this node can log to
@export var additional_log_categories: Array[DebugLogger.Category] = []

func _init() -> void:
	log_from = \"ant\"
	_init_property_groups()
	task_tree = TaskTree.create(self).with_root_task(\"CollectFood\").build()

	if task_tree and task_tree.get_active_task():
		task_tree.active_task_changed.connect(_on_active_task_changed)
		task_tree.active_behavior_changed.connect(_on_active_behavior_changed)

	add_to_group(\"ant\")

func _ready() -> void:
	spawned.emit()

func _process(delta: float) -> void:
	task_update_timer += delta
	if task_update_timer >= 1.0:
		task_tree.update(delta)
		task_update_timer = 0.0

#region Colony Management
func set_colony(_colony: Colony) -> void:
	if colony != _colony:
		colony = _colony
		# Register colony properties if available
		if colony and colony.has_method(\"get_property_group\"):
			var colony_group = colony.get_property_group()
			var result = _property_access.register_group(colony_group)
			if not result.success():
				_error(\"Failed to register colony properties: %s\" % result.error_message)
#endregion

#region Event Handlers
func _on_active_behavior_changed(_new_behavior: Behavior) -> void:
	pass

func _on_active_task_changed(_new_task: Task) -> void:
	pass
#endregion

#region Action Methods
func take_damage(amount: float) -> void:
	if amount <= 0:
		return

	var current_health = get_property_value(Path.parse(\"health.levels.current\"))
	damaged.emit()

	# Update health through property system
	_property_access.set_property_value(
		Path.parse(\"health.levels.current\"),
		current_health - amount
	)

func emit_pheromone(type: String, concentration: float) -> void:
	_info(\"Emitting pheromone of type %s and concentration %.2f\" % [type, concentration])
	#var new_pheromone = Pheromone.new(position, type, concentration, self)
	# Add the pheromone to the world (implementation depends on your world management system)

func perform_action(_action: Action) -> void:
	# Implement ant behavior here
	action_completed.emit()

func consume_food(amount: float) -> void:
	var consumed = carried_food.consume(amount)
	if consumed > 0:
		# Replenish energy through property system
		var current_energy = get_property_value(Path.parse(\"energy.levels.current\"))
		_property_access.set_property_value(
			Path.parse(\"energy.levels.current\"),
			current_energy + consumed
		)

func move(direction: Vector2, delta: float) -> void:
	var speed = get_property_value(Path.parse(\"speed.rates.movement\"))
	if not speed:
		speed = 1.0
	var vector = direction * speed * delta
	_move_to(global_position + vector)

func _move_to(location: Vector2) -> void:
	#nav_agent.target_position = global_position + location
	_info(\"Ant would be moving now to location %s\" % location)

func store_food(_colony: Colony, _time: float) -> float:
	var storing_amount: float = carried_food.mass()
	var total_stored = _colony.foods.add_food(storing_amount)
	_info(\"Stored %.2f food -> colony total: %.2f food stored\" % [storing_amount, total_stored])
	carried_food.clear()
	return storing_amount

func attack(current_target_entity: Ant, _delta: float) -> void:
	_info(\"Attack action called against %s\" % current_target_entity.name)
#endregion

#region Property System
func _init_property_access() -> void:
	_property_access = PropertyAccess.new(self)
	_trace(\"Property access system initialized\")

func _init_property_groups() -> void:
	_debug(\"Initializing property groups...\")
	
	if not _property_access:
		_init_property_access()
		
	var groups = [
		Energy.new(self),
		Reach.new(self),
		Vision.new(self),
		Olfaction.new(self),
		Strength.new(self),
		Health.new(self),
		Speed.new(self),
		Proprioception.new(self)
	]
	
	for group in groups:
		_trace(\"Registering property group: %s\" % group.name)
		var result = _property_access.register_group(group)
		if not result.success():
			_error(\"Failed to register property group %s: %s\" % [
				group.name, 
				result.get_error()
			])
		else:
			_debug(\"Successfully registered property group: %s\" % group.name)
	
	_debug(\"Property group initialization complete\")
	
#region Property Access Interface
func get_property(path: Path) -> NestedProperty:
	return _property_access.get_property(path)

func get_property_group(group_name: String) -> PropertyGroup:
	return _property_access.get_group(group_name)

func get_property_value(path: Path) -> Variant:
	return _property_access.get_property_value(path)

func set_property_value(path: String, value: Variant) -> Result:
	return _property_access.set_property_value(Path.parse(path), value)
#endregion

#region Property Group Access
func get_group_properties(group_name: String) -> Array[NestedProperty]:
	return _property_access.get_group_properties(group_name)

func get_group_names() -> Array[String]:
	return _property_access.get_group_names()
#endregion

func _configure_logger() -> void:
	var categories = [log_category] as Array[DebugLogger.Category]
	categories.append_array(additional_log_categories)
	DebugLogger.configure_source(log_from, true, categories)

#region Logging Methods
func _trace(message: String, category: DebugLogger.Category = log_category) -> void:
	DebugLogger.trace(category, message, {\"from\": log_from})

func _debug(message: String, category: DebugLogger.Category = log_category) -> void:
	DebugLogger.debug(category, message, {\"from\": log_from})

func _info(message: String, category: DebugLogger.Category = log_category) -> void:
	DebugLogger.info(category, message, {\"from\": log_from})

func _warn(message: String, category: DebugLogger.Category = log_category) -> void:
	DebugLogger.warn(category, message, {\"from\": log_from})

func _error(message: String, category: DebugLogger.Category = log_category) -> void:
	DebugLogger.error(category, message, {\"from\": log_from})
#endregion
"

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_ikxuy"]
radius = 2.57142
height = 20.0

[sub_resource type="CircleShape2D" id="CircleShape2D_bgmjh"]
radius = 200.0

[sub_resource type="CircleShape2D" id="CircleShape2D_2p8x4"]
radius = 50.0

[sub_resource type="CircleShape2D" id="CircleShape2D_epip7"]

[node name="Ant" type="CharacterBody2D" groups=["ant"]]
z_index = 5
z_as_relative = false
disable_mode = 1
collision_layer = 2
collision_mask = 0
input_pickable = true
motion_mode = 1
script = SubResource("GDScript_bx07j")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
unique_name_in_owner = true
visible = false
rotation = 1.5708
shape = SubResource("CapsuleShape2D_ikxuy")
debug_color = Color(0.552941, 0.752941, 0, 0.419608)

[node name="NavigationAgent2D" type="NavigationAgent2D" parent="."]
unique_name_in_owner = true
path_desired_distance = 15.0
target_desired_distance = 5.0
path_max_distance = 50.0
navigation_layers = 3
avoidance_layers = 2

[node name="SenseArea" type="Area2D" parent="."]
unique_name_in_owner = true
visible = false
rotation = 1.5708
collision_layer = 0
collision_mask = 59
input_pickable = false

[node name="CollisionShape2D" type="CollisionShape2D" parent="SenseArea"]
position = Vector2(-1.07288e-05, 0.125512)
scale = Vector2(1, 0.897145)
shape = SubResource("CircleShape2D_bgmjh")

[node name="SightArea" type="Area2D" parent="."]
unique_name_in_owner = true
visible = false
rotation = 1.5708
collision_layer = 0
collision_mask = 59
input_pickable = false

[node name="CollisionShape2D" type="CollisionShape2D" parent="SightArea"]
shape = SubResource("CircleShape2D_2p8x4")

[node name="ReachArea" type="Area2D" parent="."]
unique_name_in_owner = true
visible = false
modulate = Color(0.678431, 0.678431, 0, 1)
collision_mask = 48

[node name="CollisionShape2D" type="CollisionShape2D" parent="ReachArea"]
shape = SubResource("CircleShape2D_epip7")
debug_color = Color(0.321569, 0.25098, 0.027451, 0.419608)

[node name="Sprite2D" type="Sprite2D" parent="."]
unique_name_in_owner = true
self_modulate = Color(0.462745, 0.678431, 0.94902, 1)
position = Vector2(0.0969868, 0.10746)
rotation = 1.5708
scale = Vector2(0.0961376, 0.124693)
texture = ExtResource("2_wmt1h")

[node name="MouthMarker" type="Marker2D" parent="."]
unique_name_in_owner = true
modulate = Color(0.352941, 0.513726, 0.172549, 1)
position = Vector2(10.4286, 0)
gizmo_extents = 5.0

[connection signal="navigation_finished" from="NavigationAgent2D" to="." method="_on_nav_agent_navigation_finished"]
[connection signal="velocity_computed" from="NavigationAgent2D" to="." method="_on_nav_agent_velocity_computed"]
[connection signal="body_entered" from="SightArea" to="." method="_on_sight_area_body_entered"]
[connection signal="body_exited" from="SightArea" to="." method="_on_sight_area_body_exited"]
[connection signal="body_entered" from="ReachArea" to="." method="_on_reach_area_entered"]
